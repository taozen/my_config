" My customization of vim on top of Amix's ultimate vimrc.
"   Author: Tao Zheng
"
"   HINT:   Type zR if you don't know how to use folds
"
"   Utilities:
"       diff split                  :vert diffs <another file>
"       max out buffer              <C-w>_
"       list hl group               :hi
"       list colo-schemes           :colo <C-d>
"       clear search highlight      <leader><cr>
"
"

" Enable modeline explicitly.      {{{
set modeline
set modelines=5

"}}}
" Disable mouse moving triggered by touch pad.      {{{
set mouse=

"}}}
" I don't like a left bar that shows folding, because it's really distracting.      {{{
set foldcolumn=0

"}}}
" Color scheme.      {{{
" colorscheme evening " Use this under Windows.
" colorscheme zellner
" colorscheme koehler
" colo vividchalk
" colo candy
" colo matrix

colo google

set background=dark

" For Mac
set t_Co=256

" For vimdiff
if &diff
    colo google
endif

" command to show all highlight groups
" :so $VIMRUNTIME/syntax/hitest.vim
hi FgCocErrorFloatBgCocFloating ctermfg=0 ctermbg=13 guibg=Magenta
hi CocListBgRed ctermfg=0 ctermbg=13 guibg=Magenta
hi CocListBgMagenta ctermfg=0 ctermbg=13 guibg=Magenta

"hi Pmenu
"hi PmenuSel
"hi PmenuSbar
"hi PmenuThumb

"}}}
" Indentation for c/c++.        {{{
" t0 => Indent a function return type declaration.
" g0 => Align scope declarations, e.g. 'public:', with entering block.
" :0 => Indent case lables from switch.
" (0 => Indent within unclosed parentheses. (obsolete)
" l1 => Align with case lable.
" is => Indent C++ base class declarations and constructor initializations.
" c0 => Indent comments.
set cino=t0g0:0,W4l1isc0

"}}}
" Disable auto indent and smart indent. I prefer indent by file type.       {{{
set noai
set nosi

"}}}
" Four-spaces tab, auto expansion.      {{{
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

"}}}
" Fold settings.        {{{
" Quick enablement of syntax-fold.
" zc - close current fold
" zo - open all folds
" zM - close all folds
" zR - open all folds
" In addition, use zf<motion> to create a fold manually.
" Or under marker mode, <range>fo to create a fold.
map <leader>fs :set fdm=syntax<cr>
map <leader>fm :set fdm=marker<cr>

" Enable fold, but keep all folds open when a file is opened.
" This option seems to be slowing down vim a lot.
"set fdm=syntax
"augroup OpenAllFoldsOnFileOpen
"    autocmd!
"    autocmd BufRead * normal zR
"augroup END

"}}}
" Toggle line number         {{{
map <leader>nu :set invnumber<cr>

"}}}
" Ruby style recommends two-space indent.       {{{
au FileType ruby setl sw=2 sts=2 et

"}}}
" Disable cursor jumping on search.     {{{
set noincsearch

"}}}
" I enjoy a concise status bar.     {{{
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ %=Line:\ %l/%L\ \ Col:\ %c\ \  
hi StatusLine ctermfg=8 ctermbg=226

"}}}
" Abandon all buffers then quit vim.       {{{
map <leader>ba :%bd!<bar>q!<cr>

"}}}
" Auto filetype for Expect scripts.     {{{
augroup exp
    au!
    au BufRead,BufNew *.exp setl autoindent smartindent

    " Note that ^H is actually (ctrl-v ctrl-h) under insertion mode.
    au BufRead,BufNew *.exp inoremap # X#
augroup END

" Matchit for fast locating of the end/begining of a code block.
runtime macros/matchit.vim

"}}}
" Cscope settings.       {{{
if has("cscope")
    if has("mac") || has("macunix")
        set csprg=/usr/local/bin/cscope
    else
        set csprg=/usr/bin/cscope
    endif

    set csto=0
    set cst
    set nocsverb

    " Note: cscope.out should be built with absolute file path.
    " Add any database in current directory.
    if $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    set csverb
endif

" Find functions calling this function.
map <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>

"}}}
" Airline       {{{
let g:airline_theme='understated'
let g:airline_section_b='%F'
let g:airline_section_c=''
let g:airline_section_z='Line: %l/%L  Col: %c'
let g:airline#extensions#whitespace#checks = [ ]

""}}}
" Misc highlight settings       {{{
"
" Grey unhighlighted vertical split bar
hi VertSplit ctermfg=59 ctermbg=NONE cterm=NONE guifg=#252c31 guibg=#252c31 gui=NONE
hi NonText ctermfg=59 ctermbg=NONE cterm=NONE guifg=#252c31 guibg=#252c31 gui=NONE
hi TabLineFill term=REVERSE cterm=REVERSE
hi TabLineSel cterm=NONE ctermfg=11 ctermbg=59 guifg=#f8f6f2 guibg=#1c1b1a

"}}}
" ctrlp {{{

" Originated by https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'r'

" Easy bindings for its various modes
nmap <leader>cb :CtrlPBuffer<cr>
nmap <leader>cm :CtrlPMRU<cr>
nmap <leader>cx :CtrlPMixed<cr>

"}}}
" syntastic     {{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -Wall -Wextra -Wpedantic'
let g:syntastic_cpp_config_file = '.syntastic_cpp_config'

map ]l :lnext<cr>
map [l :lprev<cr>

map <leader>ss :SyntasticToggleMode<cr>

"}}}
" Nerd Tree {{{
let g:NERDTreeWinPos = "right"
let g:NERDTreeWinSize = 30
map <leader>nt :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark 
map <leader>nf :NERDTreeFind<cr>

" Show the selected file name in the status line of NerdTree window.
" let NERDTreeStatusline="%{matchstr(getline('.'), '\\s\\zs\\w\\(.*\\)')}"

" Set an empty status line for NerdTree window.
let NERDTreeStatusline=" "

"}}}
" Support for Chinese character set {{{
set fileencodings=utf-8,chinese,latin-1
set fileencoding=utf-8
set encoding=utf-8
set termencoding=utf-8

"}}}
" vim-go options and shortcuts {{{
" nunmap <leader>g

nmap <leader>gg <Plug>(go-run)
nmap <leader>gb <Plug>(go-build)
nmap <leader>gt <Plug>(go-test)
nmap <leader>gi <Plug>(go-imports)

let g:go_metalinter_autosave = 1
let g:go_version_warning = 0

augroup go
  autocmd!
  autocmd Filetype go
    \  command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    \| command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    \| command! -bang AS call go#alternate#Switch(<bang>0, 'split')
augroup END

"}}}

" vim: set fdm=marker: "
